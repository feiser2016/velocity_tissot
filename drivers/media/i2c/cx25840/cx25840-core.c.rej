--- drivers/media/i2c/cx25840/cx25840-core.c
+++ drivers/media/i2c/cx25840/cx25840-core.c
@@ -420,13 +420,11 @@ static void cx25840_initialize(struct i2c_client *client)
 	INIT_WORK(&state->fw_work, cx25840_work_handler);
 	init_waitqueue_head(&state->fw_wait);
 	q = create_singlethread_workqueue("cx25840_fw");
-	if (q) {
-		prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
-		queue_work(q, &state->fw_work);
-		schedule();
-		finish_wait(&state->fw_wait, &wait);
-		destroy_workqueue(q);
-	}
+	prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
+	queue_work(q, &state->fw_work);
+	schedule();
+	finish_wait(&state->fw_wait, &wait);
+	destroy_workqueue(q);
 
 	/* 6. */
 	cx25840_write(client, 0x115, 0x8c);
@@ -633,13 +631,11 @@ static void cx23885_initialize(struct i2c_client *client)
 	INIT_WORK(&state->fw_work, cx25840_work_handler);
 	init_waitqueue_head(&state->fw_wait);
 	q = create_singlethread_workqueue("cx25840_fw");
-	if (q) {
-		prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
-		queue_work(q, &state->fw_work);
-		schedule();
-		finish_wait(&state->fw_wait, &wait);
-		destroy_workqueue(q);
-	}
+	prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
+	queue_work(q, &state->fw_work);
+	schedule();
+	finish_wait(&state->fw_wait, &wait);
+	destroy_workqueue(q);
 
 	/* Call the cx23888 specific std setup func, we no longer rely on
 	 * the generic cx24840 func.
@@ -750,13 +746,11 @@ static void cx231xx_initialize(struct i2c_client *client)
 	INIT_WORK(&state->fw_work, cx25840_work_handler);
 	init_waitqueue_head(&state->fw_wait);
 	q = create_singlethread_workqueue("cx25840_fw");
-	if (q) {
-		prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
-		queue_work(q, &state->fw_work);
-		schedule();
-		finish_wait(&state->fw_wait, &wait);
-		destroy_workqueue(q);
-	}
+	prepare_to_wait(&state->fw_wait, &wait, TASK_UNINTERRUPTIBLE);
+	queue_work(q, &state->fw_work);
+	schedule();
+	finish_wait(&state->fw_wait, &wait);
+	destroy_workqueue(q);
 
 	cx25840_std_setup(client);
 
