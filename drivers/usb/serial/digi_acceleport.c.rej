--- drivers/usb/serial/digi_acceleport.c
+++ drivers/usb/serial/digi_acceleport.c
@@ -1251,27 +1251,8 @@ static int digi_port_init(struct usb_serial_port *port, unsigned port_num)
 
 static int digi_startup(struct usb_serial *serial)
 {
-	struct device *dev = &serial->interface->dev;
 	struct digi_serial *serial_priv;
 	int ret;
-	int i;
-
-	/* check whether the device has the expected number of endpoints */
-	if (serial->num_port_pointers < serial->type->num_ports + 1) {
-		dev_err(dev, "OOB endpoints missing\n");
-		return -ENODEV;
-	}
-
-	for (i = 0; i < serial->type->num_ports + 1 ; i++) {
-		if (!serial->port[i]->read_urb) {
-			dev_err(dev, "bulk-in endpoint missing\n");
-			return -ENODEV;
-		}
-		if (!serial->port[i]->write_urb) {
-			dev_err(dev, "bulk-out endpoint missing\n");
-			return -ENODEV;
-		}
-	}
 
 	serial_priv = kzalloc(sizeof(*serial_priv), GFP_KERNEL);
 	if (!serial_priv)
@@ -1399,30 +1380,25 @@ static int digi_read_inb_callback(struct urb *urb)
 {
 	struct usb_serial_port *port = urb->context;
 	struct digi_port *priv = usb_get_serial_port_data(port);
-	unsigned char *buf = urb->transfer_buffer;
-	int opcode;
-	int len;
-	int port_status;
-	unsigned char *data;
+	int opcode = ((unsigned char *)urb->transfer_buffer)[0];
+	int len = ((unsigned char *)urb->transfer_buffer)[1];
+	int port_status = ((unsigned char *)urb->transfer_buffer)[2];
+	unsigned char *data = ((unsigned char *)urb->transfer_buffer) + 3;
 	int flag, throttled;
+	int status = urb->status;
+
+	/* do not process callbacks on closed ports */
+	/* but do continue the read chain */
+	if (urb->status == -ENOENT)
+		return 0;
 
 	/* short/multiple packet check */
-	if (urb->actual_length < 2) {
-		dev_warn(&port->dev, "short packet received\n");
-		return -1;
-	}
-
-	opcode = buf[0];
-	len = buf[1];
-
 	if (urb->actual_length != len + 2) {
-		dev_err(&port->dev, "malformed packet received: port=%d, opcode=%d, len=%d, actual_length=%u\n",
-			priv->dp_port_num, opcode, len, urb->actual_length);
-		return -1;
-	}
-
-	if (opcode == DIGI_CMD_RECEIVE_DATA && len < 1) {
-		dev_err(&port->dev, "malformed data packet received\n");
+		dev_err(&port->dev, "%s: INCOMPLETE OR MULTIPLE PACKET, "
+			"status=%d, port=%d, opcode=%d, len=%d, "
+			"actual_length=%d, status=%d\n", __func__, status,
+			priv->dp_port_num, opcode, len, urb->actual_length,
+			port_status);
 		return -1;
 	}
 
@@ -1436,9 +1412,6 @@ static int digi_read_inb_callback(struct urb *urb)
 
 	/* receive data */
 	if (opcode == DIGI_CMD_RECEIVE_DATA) {
-		port_status = buf[2];
-		data = &buf[3];
-
 		/* get flag from port_status */
 		flag = 0;
 
@@ -1491,20 +1464,16 @@ static int digi_read_oob_callback(struct urb *urb)
 	struct usb_serial *serial = port->serial;
 	struct tty_struct *tty;
 	struct digi_port *priv = usb_get_serial_port_data(port);
-	unsigned char *buf = urb->transfer_buffer;
 	int opcode, line, status, val;
 	int i;
 	unsigned int rts;
 
-	if (urb->actual_length < 4)
-		return -1;
-
 	/* handle each oob command */
-	for (i = 0; i < urb->actual_length - 3; i += 4) {
-		opcode = buf[i];
-		line = buf[i + 1];
-		status = buf[i + 2];
-		val = buf[i + 3];
+	for (i = 0; i < urb->actual_length - 3;) {
+		opcode = ((unsigned char *)urb->transfer_buffer)[i++];
+		line = ((unsigned char *)urb->transfer_buffer)[i++];
+		status = ((unsigned char *)urb->transfer_buffer)[i++];
+		val = ((unsigned char *)urb->transfer_buffer)[i++];
 
 		dev_dbg(&port->dev, "digi_read_oob_callback: opcode=%d, line=%d, status=%d, val=%d\n",
 			opcode, line, status, val);
