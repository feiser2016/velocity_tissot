--- drivers/usb/misc/usbtest.c
+++ drivers/usb/misc/usbtest.c
@@ -133,7 +133,6 @@ get_endpoints(struct usbtest_dev *dev, struct usb_interface *intf)
 			case USB_ENDPOINT_XFER_INT:
 				if (dev->info->intr)
 					goto try_intr;
-				continue;
 			case USB_ENDPOINT_XFER_ISOC:
 				if (dev->info->iso)
 					goto try_iso;
@@ -183,13 +182,12 @@ found:
 			return tmp;
 	}
 
-	if (in)
+	if (in) {
 		dev->in_pipe = usb_rcvbulkpipe(udev,
 			in->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
-	if (out)
 		dev->out_pipe = usb_sndbulkpipe(udev,
 			out->desc.bEndpointAddress & USB_ENDPOINT_NUMBER_MASK);
-
+	}
 	if (iso_in) {
 		dev->iso_in = &iso_in->desc;
 		dev->in_iso_pipe = usb_rcvisocpipe(udev,
@@ -305,20 +303,11 @@ static unsigned mod_pattern;
 module_param_named(pattern, mod_pattern, uint, S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(mod_pattern, "i/o pattern (0 == zeroes)");
 
-static unsigned get_maxpacket(struct usb_device *udev, int pipe)
-{
-	struct usb_host_endpoint	*ep;
-
-	ep = usb_pipe_endpoint(udev, pipe);
-	return le16_to_cpup(&ep->desc.wMaxPacketSize);
-}
-
-static void simple_fill_buf(struct urb *urb)
+static inline void simple_fill_buf(struct urb *urb)
 {
 	unsigned	i;
 	u8		*buf = urb->transfer_buffer;
 	unsigned	len = urb->transfer_buffer_length;
-	unsigned	maxpacket;
 
 	switch (pattern) {
 	default:
@@ -327,9 +316,8 @@ static inline void simple_fill_buf(struct urb *urb)
 		memset(buf, 0, len);
 		break;
 	case 1:			/* mod63 */
-		maxpacket = get_maxpacket(urb->dev, urb->pipe);
 		for (i = 0; i < len; i++)
-			*buf++ = (u8) ((i % maxpacket) % 63);
+			*buf++ = (u8) (i % 63);
 		break;
 	}
 }
@@ -361,7 +349,6 @@ static int simple_check_buf(struct usbtest_dev *tdev, struct urb *urb)
 	u8		expected;
 	u8		*buf = urb->transfer_buffer;
 	unsigned	len = urb->actual_length;
-	unsigned	maxpacket = get_maxpacket(urb->dev, urb->pipe);
 
 	int ret = check_guard_bytes(tdev, urb);
 	if (ret)
@@ -379,7 +366,7 @@ static int simple_check_buf(struct usbtest_dev *tdev, struct urb *urb)
 		 * with set_interface or set_config.
 		 */
 		case 1:			/* mod63 */
-			expected = (i % maxpacket) % 63;
+			expected = i % 63;
 			break;
 		/* always fail unsupported patterns */
 		default:
@@ -491,14 +478,11 @@ static void free_sglist(struct scatterlist *sg, int nents)
 }
 
 static struct scatterlist *
-alloc_sglist(int nents, int max, int vary, struct usbtest_dev *dev, int pipe)
+alloc_sglist(int nents, int max, int vary)
 {
 	struct scatterlist	*sg;
-	unsigned int		n_size = 0;
 	unsigned		i;
 	unsigned		size = max;
-	unsigned		maxpacket =
-		get_maxpacket(interface_to_usbdev(dev->intf), pipe);
 
 	if (max == 0)
 		return NULL;
@@ -527,8 +511,7 @@ alloc_sglist(int nents, int max, int vary)
 			break;
 		case 1:
 			for (j = 0; j < size; j++)
-				*buf++ = (u8) (((j + n_size) % maxpacket) % 63);
-			n_size += size;
+				*buf++ = (u8) (j % 63);
 			break;
 		}
 
@@ -547,6 +530,7 @@ static void sg_timeout(unsigned long _req)
 {
 	struct usb_sg_request	*req = (struct usb_sg_request *) _req;
 
+	req->status = -ETIMEDOUT;
 	usb_sg_cancel(req);
 }
 
@@ -577,10 +561,8 @@ static int perform_sglist(
 		mod_timer(&sg_timer, jiffies +
 				msecs_to_jiffies(SIMPLE_IO_TIMEOUT));
 		usb_sg_wait(req);
-		if (!del_timer_sync(&sg_timer))
-			retval = -ETIMEDOUT;
-		else
-			retval = req->status;
+		del_timer_sync(&sg_timer);
+		retval = req->status;
 
 		/* FIXME check resulting data pattern */
 
@@ -2193,8 +2175,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 			"TEST 5:  write %d sglists %d entries of %d bytes\n",
 				param->iterations,
 				param->sglen, param->length);
-		sg = alloc_sglist(param->sglen, param->length,
-				0, dev, dev->out_pipe);
+		sg = alloc_sglist(param->sglen, param->length, 0);
 		if (!sg) {
 			retval = -ENOMEM;
 			break;
@@ -2212,8 +2193,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 			"TEST 6:  read %d sglists %d entries of %d bytes\n",
 				param->iterations,
 				param->sglen, param->length);
-		sg = alloc_sglist(param->sglen, param->length,
-				0, dev, dev->in_pipe);
+		sg = alloc_sglist(param->sglen, param->length, 0);
 		if (!sg) {
 			retval = -ENOMEM;
 			break;
@@ -2230,8 +2210,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 			"TEST 7:  write/%d %d sglists %d entries 0..%d bytes\n",
 				param->vary, param->iterations,
 				param->sglen, param->length);
-		sg = alloc_sglist(param->sglen, param->length,
-				param->vary, dev, dev->out_pipe);
+		sg = alloc_sglist(param->sglen, param->length, param->vary);
 		if (!sg) {
 			retval = -ENOMEM;
 			break;
@@ -2248,8 +2227,7 @@ usbtest_ioctl(struct usb_interface *intf, unsigned int code, void *buf)
 			"TEST 8:  read/%d %d sglists %d entries 0..%d bytes\n",
 				param->vary, param->iterations,
 				param->sglen, param->length);
-		sg = alloc_sglist(param->sglen, param->length,
-				param->vary, dev, dev->in_pipe);
+		sg = alloc_sglist(param->sglen, param->length, param->vary);
 		if (!sg) {
 			retval = -ENOMEM;
 			break;
